=begin
#Role Based Access Control

#The API for Role Based Access Control.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'spec_helper'
require 'json'

# Unit tests for RBACApiClient::GroupApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GroupApi' do
  before do
    # run before each test
    @api_instance = RBACApiClient::GroupApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupApi' do
    it 'should create an instance of GroupApi' do
      expect(@api_instance).to be_instance_of(RBACApiClient::GroupApi)
    end
  end

  # unit tests for add_principal_to_group
  # Add a principal to a group in the tenant
  # @param uuid ID of group to update
  # @param group_principal_in Principal to add to a group
  # @param [Hash] opts the optional parameters
  # @return [GroupWithPrincipalsAndRoles]
  describe 'add_principal_to_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_role_to_group
  # Add a role to a group in the tenant
  # @param uuid ID of group to update
  # @param group_role_in Role to add to a group
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'add_role_to_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_group
  # Create a group in a tenant
  # @param group Group to create in tenant
  # @param [Hash] opts the optional parameters
  # @return [GroupOut]
  describe 'create_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_group
  # Delete a group in the tenant
  # @param uuid ID of group to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_principal_from_group
  # Remove a principal from a group in the tenant
  # @param uuid ID of group to update
  # @param usernames A comma separated list of usernames for principals to remove from the group
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_principal_from_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role_from_group
  # Remove a role from a group in the tenant
  # @param uuid ID of group to update
  # @param roles A comma separated list of role UUIDs for roles to remove from the group
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_role_from_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_group
  # Get a group in the tenant
  # @param uuid ID of group to get
  # @param [Hash] opts the optional parameters
  # @return [GroupWithPrincipalsAndRoles]
  describe 'get_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_groups
  # List the groups for a tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Parameter for selecting the amount of data returned.
  # @option opts [Integer] :offset Parameter for selecting the offset of data.
  # @option opts [String] :name Parameter for filtering resource by name using string contains search.
  # @option opts [String] :scope Parameter for filtering resource by scope.
  # @option opts [String] :username A username for a principal to filter for groups
  # @option opts [String] :order_by Parameter for ordering resource by value.
  # @return [GroupPagination]
  describe 'list_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_roles_for_group
  # List the roles for a group in the tenant
  # @param uuid ID of group
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exclude If this is set to true, the result would be roles excluding the ones in the group
  # @option opts [Integer] :limit Parameter for selecting the amount of data returned.
  # @option opts [Integer] :offset Parameter for selecting the offset of data.
  # @return [GroupRolesPagination]
  describe 'list_roles_for_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_group
  # Udate a group in the tenant
  # @param uuid ID of group to update
  # @param group Group to update in tenant
  # @param [Hash] opts the optional parameters
  # @return [GroupOut]
  describe 'update_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
